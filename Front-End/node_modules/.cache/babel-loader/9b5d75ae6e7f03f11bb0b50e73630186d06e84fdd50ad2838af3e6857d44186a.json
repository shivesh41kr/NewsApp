{"ast":null,"code":"//post, user, category\n// src/services/apiService.js\nimport Post from '../';\nconst API_URL = 'http://127.0.0.1:8000/apis';\nconst fetchPosts = async limit => {\n  const response = await fetch(`${API_URL}/posts/`);\n  const data = await response.json();\n  if (!Array.isArray(data)) {\n    throw new Error(\"Invalid data format\");\n  }\n  return data.slice(0, limit);\n};\nconst fetchAuthor = async userId => {\n  const response = await fetch(`${API_URL}/users/${userId}/`);\n  const data = await response.json();\n  return data.username; // Assuming username is the field for author name\n};\nconst fetchPostsWithAuthors = async limit => {\n  const posts = await fetchPosts(limit);\n  const authorRequests = posts.map(post => fetchAuthor(post.user));\n  const authors = await Promise.all(authorRequests);\n  return posts.map((post, index) => new Post(post.id, post.title, post.short_description, post.content, post.banner_path, authors[index]));\n};\nexport { fetchPostsWithAuthors };","map":{"version":3,"names":["Post","API_URL","fetchPosts","limit","response","fetch","data","json","Array","isArray","Error","slice","fetchAuthor","userId","username","fetchPostsWithAuthors","posts","authorRequests","map","post","user","authors","Promise","all","index","id","title","short_description","content","banner_path"],"sources":["/home/shivesh-kumar/Desktop/django_news/Front-End/src/Services/apiService.js"],"sourcesContent":["//post, user, category\n// src/services/apiService.js\nimport Post from '../';\n\nconst API_URL = 'http://127.0.0.1:8000/apis';\n\nconst fetchPosts = async (limit) => {\n  const response = await fetch(`${API_URL}/posts/`);\n  const data = await response.json();\n  if (!Array.isArray(data)) {\n    throw new Error(\"Invalid data format\");\n  }\n  return data.slice(0, limit);\n};\n\nconst fetchAuthor = async (userId) => {\n  const response = await fetch(`${API_URL}/users/${userId}/`);\n  const data = await response.json();\n  return data.username; // Assuming username is the field for author name\n};\n\nconst fetchPostsWithAuthors = async (limit) => {\n  const posts = await fetchPosts(limit);\n  const authorRequests = posts.map(post => fetchAuthor(post.user));\n  const authors = await Promise.all(authorRequests);\n\n  return posts.map((post, index) => new Post(\n    post.id,\n    post.title,\n    post.short_description,\n    post.content,\n    post.banner_path,\n    authors[index]\n  ));\n};\n\nexport { fetchPostsWithAuthors };\n"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,MAAM,KAAK;AAEtB,MAAMC,OAAO,GAAG,4BAA4B;AAE5C,MAAMC,UAAU,GAAG,MAAOC,KAAK,IAAK;EAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,SAAS,CAAC;EACjD,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACxB,MAAM,IAAII,KAAK,CAAC,qBAAqB,CAAC;EACxC;EACA,OAAOJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAER,KAAK,CAAC;AAC7B,CAAC;AAED,MAAMS,WAAW,GAAG,MAAOC,MAAM,IAAK;EACpC,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUY,MAAM,GAAG,CAAC;EAC3D,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACQ,QAAQ,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,qBAAqB,GAAG,MAAOZ,KAAK,IAAK;EAC7C,MAAMa,KAAK,GAAG,MAAMd,UAAU,CAACC,KAAK,CAAC;EACrC,MAAMc,cAAc,GAAGD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAIP,WAAW,CAACO,IAAI,CAACC,IAAI,CAAC,CAAC;EAChE,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,cAAc,CAAC;EAEjD,OAAOD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEK,KAAK,KAAK,IAAIxB,IAAI,CACxCmB,IAAI,CAACM,EAAE,EACPN,IAAI,CAACO,KAAK,EACVP,IAAI,CAACQ,iBAAiB,EACtBR,IAAI,CAACS,OAAO,EACZT,IAAI,CAACU,WAAW,EAChBR,OAAO,CAACG,KAAK,CACf,CAAC,CAAC;AACJ,CAAC;AAED,SAAST,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}