{"ast":null,"code":"var _jsxFileName = \"/home/shivesh-kumar/Desktop/django_news/Front-End/src/jsx/Components/article/article.jsx\",\n  _s = $RefreshSig$();\n// PostDetails.jsx\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostDetails = ({\n  fetchUrl\n}) => {\n  _s();\n  const {\n    postId\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true); // State to manage loading indicator\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        const response = await fetch(`${fetchUrl}/posts/${postId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch post details: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setPost(data);\n      } catch (error) {\n        console.error('Error fetching post details:', error);\n        // Optionally, set a state to manage and display specific error messages\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPostDetails();\n  }, [fetchUrl, postId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this); // Display loading indicator while fetching data\n  }\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Unable to fetch post details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this); // Display error message if fetch fails\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-details\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.short_description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \"z\", /*#__PURE__*/_jsxDEV(\"img\", {\n      src: post.banner_path,\n      alt: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Keywords: \", post.meta_keywords]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date Created: \", new Date(post.date_created).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date Updated: \", new Date(post.date_updated).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PostDetails, \"p57fiaa+N5VlWMJrNhjcwhF622o=\", false, function () {\n  return [useParams];\n});\n_c = PostDetails;\nexport default PostDetails;\nvar _c;\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","PostDetails","fetchUrl","_s","postId","post","setPost","loading","setLoading","fetchPostDetails","response","fetch","ok","Error","statusText","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","short_description","src","banner_path","alt","meta_keywords","Date","date_created","toLocaleDateString","date_updated","_c","$RefreshReg$"],"sources":["/home/shivesh-kumar/Desktop/django_news/Front-End/src/jsx/Components/article/article.jsx"],"sourcesContent":["// PostDetails.jsx\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst PostDetails = ({ fetchUrl }) => {\n  const { postId } = useParams();\n  const [post, setPost] = useState(null);\n  const [loading, setLoading] = useState(true); // State to manage loading indicator\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      try {\n        const response = await fetch(`${fetchUrl}/posts/${postId}`);\n        if (!response.ok) {\n          throw new Error(`Failed to fetch post details: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setPost(data);\n      } catch (error) {\n        console.error('Error fetching post details:', error);\n        // Optionally, set a state to manage and display specific error messages\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchPostDetails();\n  }, [fetchUrl, postId]);\n\n  if (loading) {\n    return <div>Loading...</div>; // Display loading indicator while fetching data\n  }\n\n  if (!post) {\n    return <div>Error: Unable to fetch post details</div>; // Display error message if fetch fails\n  }\n\n  return (\n    <div className=\"post-details\">\n      <h2>{post.title}</h2>\n      <p>{post.short_description}</p>z\n      {/* Assuming banner_path is a URL to an image */}\n      <img src={post.banner_path} alt={post.title} />\n      <p>Keywords: {post.meta_keywords}</p>\n      <p>Date Created: {new Date(post.date_created).toLocaleDateString()}</p>\n      <p>Date Updated: {new Date(post.date_updated).toLocaleDateString()}</p>\n      {/* Add any other details you want to display */}\n    </div>\n  );\n};\n\nexport default PostDetails;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}