{"ast":null,"code":"const API_URL = 'http://127.0.0.1:8000/apis';\nconst fetchPostDetails = async postId => {\n  const response = await fetch(`${API_URL}/posts/${postId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch post: ${response.statusText}`);\n  return response.json();\n};\nconst fetchUserDetails = async userId => {\n  const response = await fetch(`${API_URL}/users/${userId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch user: ${response.statusText}`);\n  return response.json();\n};\nconst fetchCategoryDetails = async categoryId => {\n  const response = await fetch(`${API_URL}/categories/${categoryId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch category: ${response.statusText}`);\n  return response.json();\n};\nconst fetchPosts = async limit => {\n  const response = await fetch(`${API_URL}/posts/`);\n  if (!response.ok) throw new Error(`Failed to fetch posts: ${response.statusText}`);\n  const data = await response.json();\n  return data.slice(0, limit);\n};\nconst fetchPostsWithDetails = async limit => {\n  try {\n    const posts = await fetchPosts(limit);\n    const postsWithDetails = await Promise.all(posts.map(async post => {\n      const author = await fetchUserDetails(post.user);\n      const categories = await Promise.all(post.categories.map(categoryId => fetchCategoryDetails(categoryId)));\n      return {\n        ...post,\n        author,\n        categories\n      };\n    }));\n    return postsWithDetails;\n  } catch (error) {\n    throw error;\n  }\n};\nexport { fetchPostsWithDetails };","map":{"version":3,"names":["API_URL","fetchPostDetails","postId","response","fetch","ok","Error","statusText","json","fetchUserDetails","userId","fetchCategoryDetails","categoryId","fetchPosts","limit","data","slice","fetchPostsWithDetails","posts","postsWithDetails","Promise","all","map","post","author","user","categories","error"],"sources":["/home/shivesh-kumar/Desktop/django_news/Front-End/src/Services/apiService.js"],"sourcesContent":["const API_URL = 'http://127.0.0.1:8000/apis';\n\nconst fetchPostDetails = async (postId) => {\n  const response = await fetch(`${API_URL}/posts/${postId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch post: ${response.statusText}`);\n  return response.json();\n};\n\nconst fetchUserDetails = async (userId) => {\n  const response = await fetch(`${API_URL}/users/${userId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch user: ${response.statusText}`);\n  return response.json();\n};\n\nconst fetchCategoryDetails = async (categoryId) => {\n  const response = await fetch(`${API_URL}/categories/${categoryId}/`);\n  if (!response.ok) throw new Error(`Failed to fetch category: ${response.statusText}`);\n  return response.json();\n};\n\nconst fetchPosts = async (limit) => {\n  const response = await fetch(`${API_URL}/posts/`);\n  if (!response.ok) throw new Error(`Failed to fetch posts: ${response.statusText}`);\n  const data = await response.json();\n  return data.slice(0, limit);\n};\n\nconst fetchPostsWithDetails = async (limit) => {\n  try {\n    const posts = await fetchPosts(limit);\n    const postsWithDetails = await Promise.all(posts.map(async (post) => {\n      const author = await fetchUserDetails(post.user);\n      const categories = await Promise.all(post.categories.map(categoryId => fetchCategoryDetails(categoryId)));\n      return { ...post, author, categories };\n    }));\n    return postsWithDetails;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport { fetchPostsWithDetails };\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,4BAA4B;AAE5C,MAAMC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUE,MAAM,GAAG,CAAC;EAC3D,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACjF,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EACzC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAUU,MAAM,GAAG,CAAC;EAC3D,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACjF,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMG,oBAAoB,GAAG,MAAOC,UAAU,IAAK;EACjD,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,eAAeY,UAAU,GAAG,CAAC;EACpE,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACrF,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMK,UAAU,GAAG,MAAOC,KAAK,IAAK;EAClC,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,SAAS,CAAC;EACjD,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0BH,QAAQ,CAACI,UAAU,EAAE,CAAC;EAClF,MAAMQ,IAAI,GAAG,MAAMZ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClC,OAAOO,IAAI,CAACC,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC;AAC7B,CAAC;AAED,MAAMG,qBAAqB,GAAG,MAAOH,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMI,KAAK,GAAG,MAAML,UAAU,CAACC,KAAK,CAAC;IACrC,MAAMK,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,GAAG,CAAC,MAAOC,IAAI,IAAK;MACnE,MAAMC,MAAM,GAAG,MAAMf,gBAAgB,CAACc,IAAI,CAACE,IAAI,CAAC;MAChD,MAAMC,UAAU,GAAG,MAAMN,OAAO,CAACC,GAAG,CAACE,IAAI,CAACG,UAAU,CAACJ,GAAG,CAACV,UAAU,IAAID,oBAAoB,CAACC,UAAU,CAAC,CAAC,CAAC;MACzG,OAAO;QAAE,GAAGW,IAAI;QAAEC,MAAM;QAAEE;MAAW,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,OAAOP,gBAAgB;EACzB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,SAASV,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}